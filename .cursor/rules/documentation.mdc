# Groov- Product Documentation

## Overview

Groov is a simple productivity application built on the Getting Things Done (GTD) methodology. It helps users organize and track tasks efficiently with a minimalist and intuitive interface. The application includes task management and read-only calendar integration.

## Technology Stack

- **Frontend**: React with TypeScript
- **Backend**: Express.js with Supabase
- **Authentication**: Supabase Auth
- **Database**: PostgreSQL with Row Level Security
- **State Management**: TanStack React Query
- **UI Components**: Shadcn UI with Tailwind CSS
- **Routing**: Wouter
- **Form Handling**: React Hook Form with Zod validation
- **Date Handling**: `date-fns`, `react-day-picker`
- **Drag and Drop**: `@dnd-kit/core`, `@dnd-kit/utilities`
- **Charts**: Recharts
- **Icons**: Lucide React
- **Google Calendar**: `google-auth-library`, `googleapis`
- **Database ORM**: Drizzle ORM with Drizzle Zod
- **Animation**: Framer Motion
- **UI Libraries**: Various Radix UI components for advanced UI elements

## Application Structure

### Client-Side Architecture

The client application is organized into the following directories:

- `/client/src/components`: Reusable UI components
- `/client/src/components/ui`: Shadcn UI components
- `/client/src/contexts`: React contexts for state management and data fetching
- `/client/src/hooks`: Custom React hooks
- `/client/src/lib`: Utility functions, configurations (including Supabase client)
- `/client/src/pages`: Main page components
- `/client/src/assets`: Static assets and images

### Server-Side/Backend

- **Database**: PostgreSQL managed via Supabase
- **Schema**: Defined using Drizzle ORM in `/shared/schema.ts`
- **Authentication**: Handled by Supabase Auth
- **Row Level Security (RLS)**: Implemented in PostgreSQL for data access control (see `/sql/`)
- **Data Interaction**: Primarily through the Supabase client library (`@supabase/supabase-js`) on the frontend, coordinated with React Query
- **Edge Functions**: Supabase Edge Functions for serverless operations

### Shared Code

- `/shared/schema.ts`: Contains Drizzle ORM schema definitions, Zod validation schemas derived using `drizzle-zod`, and shared TypeScript types

### Project Configuration

- `vite.config.ts`: Vite bundler configuration
- `tsconfig.json`: TypeScript configuration with path aliases
- `tailwind.config.js`: Tailwind CSS configuration
- `drizzle.config.ts`: Drizzle ORM configuration
- `.env`: Environment variables for various services

## Core Features

### 1. Task Management

The task management system has been enhanced with the following features:

#### Weekly Review

The application includes a comprehensive weekly review system following GTD methodology:

#### Weekly Review Checklist
- **Empty Your Head**: Write down all ideas, tasks, and thoughts
- **Process Inboxes**: Assign new tasks to appropriate places
- **Review To-do Lists**: Update and mark completed tasks
- **Review Project Lists**: Check progress and define next actions
- **Review Someday/Maybe**: Evaluate items for activation
- **Review Calendar**: Check upcoming appointments
- **Review Waiting For**: Follow up on delegated tasks

#### Review Interface
- **Modal Dialog**: Clean, focused interface
- **Progress Tracking**: Checkbox-based completion
- **Guided Process**: Clear instructions for each step
- **Success Feedback**: Completion notifications
- **Regular Reminders**: Weekly review prompts

#### Task Organization

The task management system has been enhanced with time-based organization:

#### Time-based Views
- **Today**: Tasks scheduled for current day
- **Tomorrow**: Tasks scheduled for next day
- **Future**: Tasks beyond tomorrow
- **Someday**: Unscheduled or backlog tasks
- **Completed**: Finished tasks with timestamps

#### Quick Add Features
- **Instant Task Creation**: Add tasks directly to Today/Tomorrow
- **Smart Scheduling**: Automatic time slot allocation
- **Default Colors**: Inherit user preferences
- **Conflict Avoidance**: Smart scheduling logic

#### Task Actions
- **Swipe Gestures**: Complete/delete tasks
- **Drag and Drop**: Reschedule tasks
- **Color Customization**: Visual organization
- **Notes and Details**: Rich task information
- **Time Range Selection**: Flexible scheduling

#### Task Card Features
- **Visual Feedback**:
  - Color-coded tasks
  - Completion status
  - Drag animations
  - Swipe indicators
  - Adaptive text colors

#### Task List Features
- **Organization**:
  - Collapsible sections
  - Sticky completed tasks
  - Automatic sorting
  - Empty state handling
  - Quick add per section

#### Task Schema
```typescript
// Database Schema (snake_case)
export type Task = {
  id: number;
  title: string;
  notes: string | null;
  color: string | null;
  start_time: string | null;  // ISO 8601 timestamp
  end_time: string | null;    // ISO 8601 timestamp
  completed_at: string | null; // ISO 8601 timestamp
  created_at: string;         // ISO 8601 timestamp
  updated_at: string;         // ISO 8601 timestamp
  user_id: UUID;              // For Row Level Security
};

// Form Schema (camelCase)
export type InsertTask = {
  title: string;
  notes?: string | null;
  color?: string | null;
  startTime?: string | null; // ISO 8601 timestamp
  endTime?: string | null;   // ISO 8601 timestamp
  // completedAt, createdAt, updatedAt, id are handled by DB/backend
};
```

### Task API Endpoints

#### Task Management
- `GET /api/tasks`: Get all tasks for the authenticated user
- `GET /api/tasks/:id`: Get a specific task
- `POST /api/tasks`: Create a new task
- `PATCH /api/tasks/:id`: Update a task
- `DELETE /api/tasks/:id`: Delete a task

### Task Security

#### Row Level Security (RLS)
```sql
-- Users can only see their own tasks
CREATE POLICY "Users can view their own tasks" 
  ON public.tasks 
  FOR SELECT 
  USING (auth.uid() = user_id);

-- Users can only create tasks for themselves
CREATE POLICY "Users can insert their own tasks" 
  ON public.tasks 
  FOR INSERT 
  WITH CHECK (auth.uid() = user_id);

-- Users can only update their own tasks
CREATE POLICY "Users can update their own tasks" 
  ON public.tasks 
  FOR UPDATE 
  USING (auth.uid() = user_id);

-- Users can only delete their own tasks
CREATE POLICY "Users can delete their own tasks" 
  ON public.tasks 
  FOR DELETE 
  USING (auth.uid() = user_id);
```

#### Security Features
- User-specific task access
- Secure CRUD operations
- Automatic user ID assignment
- Cascading deletions
- Foreign key constraints
- Default value constraints

### 2. Calendar Integration

The calendar feature now includes full Google Calendar integration:

- **Google Calendar Features**:
  - Connect/disconnect Google Calendar accounts
  - View Google Calendar events alongside tasks
  - Customizable event colors
  - Auto-refresh of access tokens
  - Read-only access to calendar events
  - Multiple calendar support
  - Event details modal view

The calendar feature allows users to:
- Schedule tasks at specific time slots
- View tasks and Google Calendar events in a weekly calendar view
- Create, update, and delete calendar events
- Link calendar events to specific tasks
- Customize default colors for tasks and Google Calendar events

Calendar events contain:
- `id`: Unique identifier
- `title`: Event name
- `description`: Event details
- `startTime`: Start date and time
- `endTime`: End date and time
- `taskId`: Optional associated task
- `createdAt`: Creation timestamp
- `color`: Event color (customizable)

### Connected Calendar Schema

```typescript
export type ConnectedCalendar = {
  id: number;
  user_id: number;
  provider: 'google' | 'outlook' | string;
  calendar_id: string;
  calendar_name: string;
  access_token: string;
  refresh_token: string | null;
  token_expires_at: string | null;
  is_primary: boolean;
  is_enabled: boolean;
  created_at: string;
  last_synced_at: string | null;
};
```

### 3. User Authentication

- **Secure Login/Registration**: Uses Supabase Auth for user management.
- **Data Isolation**: Each user's data (e.g., tasks) is secured using PostgreSQL Row Level Security based on their authenticated user ID.

### 4. User Settings and Preferences

The application includes comprehensive settings for personalizing the user experience:

#### Color Customization
- **Default Task Color**: Customize the default color for new tasks
- **Default Google Calendar Event Color**: Set the display color for Google Calendar events
- **Color Picker Component**: User-friendly color selection with predefined palette:
  - Cream (#F0EAD2)
  - Pale Green (#DDE5B6)
  - Sage (#B1C29E)
  - Taupe (#A98467)
  - Dark Brown (#6C584C)
  - Orange (#F0A04B)

#### Calendar Settings
- **Calendar Provider Management**:
  - Connect/disconnect Google Calendar
  - Future support for Outlook and Apple Calendar
  - Enable/disable calendar sync
  - Select default calendar for new events
- **Calendar Display Options**:
  - Customize event colors
  - Set default view preferences
  - Configure time range display

#### User Profile
- **Account Management**:
  - Username customization
  - Email management
  - Sign out functionality
- **Preferences Storage**:
  - Persistent settings across sessions
  - Default color preferences
  - Calendar sync preferences

#### Settings UI
- **Settings Modal**:
  - Clean, organized interface
  - Live preview of color changes
  - Reset to defaults option
  - Save/cancel functionality
- **Loading States**:
  - Loading indicators
  - Save confirmation
  - Error handling
  - Success notifications

#### User Data Model
```sql
CREATE TABLE public.users (
  id UUID PRIMARY KEY,
  username TEXT UNIQUE,
  email TEXT UNIQUE,
  calendar_sync_enabled BOOLEAN DEFAULT false,
  default_calendar_id INT4 DEFAULT NULL,
  default_task_color TEXT DEFAULT NULL,
  default_gcal_color TEXT DEFAULT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc', NOW()),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc', NOW())
);
```

## API Endpoints / Data Fetching

Data interaction (CRUD operations for tasks, fetching calendar connection info) is primarily handled via:
- **Supabase Client Library (`@supabase/supabase-js`)**: Used directly in the frontend.
- **TanStack React Query**: Manages server state, caching, and data fetching hooks.
- **PostgreSQL Row Level Security (RLS)**: Enforces data access rules directly in the database.
- **Supabase Edge Functions (Potential)**: The `/supabase/functions/` directory suggests potential use, though not confirmed active in this analysis.

## Data Models

### Task (from `shared/schema.ts`)

```typescript
// Represents the data structure fetched from the database (snake_case)
export type Task = {
  id: number;
  title: string;
  notes: string | null;
  color: string | null;
  start_time: string | null; // ISO 8601 timestamp
  end_time: string | null;   // ISO 8601 timestamp
  completed_at: string | null; // ISO 8601 timestamp
  created_at: string;        // ISO 8601 timestamp
  updated_at: string;        // ISO 8601 timestamp
  // user_id is present in DB for RLS but usually not directly handled in frontend model
};

// Represents the data structure used for inserting/updating (camelCase, matches form)
export type InsertTask = {
  title: string;
  notes?: string | null;
  color?: string | null;
  startTime?: string | null; // ISO 8601 timestamp
  endTime?: string | null;   // ISO 8601 timestamp
  // completedAt, createdAt, updatedAt, id are handled by DB/backend
};
```

### Connected Calendar (from `shared/schema.ts`)

```typescript
export type ConnectedCalendar = {
  id: number;
  user_id: number; // Or UUID depending on user table schema
  provider: 'google' | 'outlook' | string; // Allows known + future providers
  calendar_id: string;
  calendar_name: string;
  access_token: string;
  refresh_token: string | null;
  token_expires_at: string | null; // ISO 8601 timestamp
  is_primary: boolean;
  is_enabled: boolean;
  created_at: string; // ISO 8601 timestamp
  last_synced_at: string | null; // ISO 8601 timestamp
};
```

### User (Conceptual - Managed by Supabase Auth)

```typescript
// User data is primarily managed by Supabase Auth.
// The 'auth.users' table typically includes fields like:
export type AuthUser = {
  id: string; // UUID
  email?: string;
  phone?: string;
  // ... other Supabase Auth fields
  created_at: string; // ISO 8601 timestamp
  // ... may include app-specific metadata
};
```

## API Endpoints

### Calendar Events

- `GET /api/calendar-events`: Get all calendar events
- `GET /api/calendar-events/:id`: Get a specific event
- `POST /api/calendar-events`: Create a new event
- `PATCH /api/calendar-events/:id`: Update an event
- `DELETE /api/calendar-events/:id`: Delete an event

### Connected Calendars

- `GET /api/connected-calendars`: Get user's connected calendars
- `POST /api/connected-calendars`: Connect a new calendar
- `DELETE /api/connected-calendars/:id`: Disconnect a calendar
- `POST /api/connected-calendars/:id/refresh`: Refresh calendar access token

## UI Components and Styling

### Component Library

The application uses a comprehensive set of UI components built on Shadcn UI:

#### Core Components
- **Button**: Customizable button with variants and sizes
- **Input**: Text input with focus states and validation
- **Select**: Dropdown selection with search and custom rendering
- **Dialog**: Modal dialogs and popovers
- **Sheet**: Slide-out panels and drawers
- **Calendar**: Date picker with range selection
- **ColorPicker**: Custom color selection with predefined palette
- **Sidebar**: Collapsible navigation with mobile support
- **Chart**: Data visualization using Recharts
- **Breadcrumb**: Navigation breadcrumbs
- **ResizablePanel**: Adjustable panel layouts

#### Task Components
- **TaskGrid**: Main task management interface
  - Section-based organization (Today/Tomorrow/Future)
  - Quick Add functionality
  - Drag and drop support
  - Custom styling for different task states
- **TaskCard**: Individual task display
  - Color customization
  - Status indicators
  - Priority and energy level badges
  - Due date display
  - Action buttons

#### Calendar Components
- **WeeklyCalendar**: 
  - 7-day view with hourly slots
  - Drag and drop support
  - Event color customization
  - Current time indicator
  - Multiple calendar support
- **EventModal**: Event creation and editing
  - Color selection
  - Date/time picker
  - Task linking
  - Description editor

### Styling System

#### Tailwind Configuration
```javascript
theme: {
  extend: {
    colors: {
      'groov-navy': '#1a1f36',
      'groov-purple': '#7c3aed',
      'groov-blue': '#3b82f6',
      'groov-light': '#f3f4f6',
      'groov-gray': '#6b7280',
    }
  }
}
```

#### Custom CSS Classes
```css
.task-label {
  @apply inline-flex items-center px-2 py-0.5 rounded text-xs font-medium;
}

.priority-high {
  @apply bg-red-100 text-red-800;
}

.priority-medium {
  @apply bg-yellow-100 text-yellow-800;
}

.priority-low {
  @apply bg-green-100 text-green-800;
}

.energy-high {
  @apply bg-purple-100 text-purple-800;
}

.energy-medium {
  @apply bg-blue-100 text-blue-800;
}

.energy-low {
  @apply bg-gray-100 text-gray-800;
}
```

#### Theme Variables
```css
:root {
  --background: 0 0% 100%;
  --foreground: 222.2 84% 4.9%;
  --card: 0 0% 100%;
  --card-foreground: 222.2 84% 4.9%;
  --popover: 0 0% 100%;
  --popover-foreground: 222.2 84% 4.9%;
  --primary: 221.2 83.2% 53.3%;
  --primary-foreground: 210 40% 98%;
  --secondary: 210 40% 96.1%;
  --secondary-foreground: 222.2 47.4% 11.2%;
  --muted: 210 40% 96.1%;
  --muted-foreground: 215.4 16.3% 46.9%;
  --accent: 210 40% 96.1%;
  --accent-foreground: 222.2 47.4% 11.2%;
  --destructive: 0 84.2% 60.2%;
  --destructive-foreground: 210 40% 98%;
  --border: 214.3 31.8% 91.4%;
  --input: 214.3 31.8% 91.4%;
  --ring: 221.2 83.2% 53.3%;
  --radius: 0.5rem;
}
```

### Color System

#### Task Colors
- **Default Colors**: Predefined palette for tasks
  - Cream (#F0EAD2)
  - Pale Green (#DDE5B6)
  - Sage (#B1C29E)
  - Taupe (#A98467)
  - Dark Brown (#6C584C)
  - Orange (#F0A04B)

#### Context Colors
- Home: Teal
- Work: Indigo
- Errands: Orange
- Computer: Sky Blue
- Phone: Rose
- Planning: Emerald
- Finances: Violet

## State Management and Data Fetching

### React Query Integration

The application uses TanStack React Query for server state management:

#### Query Client Configuration
```typescript
export const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      refetchInterval: false,
      refetchOnWindowFocus: false,
      staleTime: Infinity,
      retry: false,
    },
    mutations: {
      retry: false,
    },
  },
});
```

### Context Providers

#### Task Context
```typescript
interface TaskContextType {
  tasks: Task[];
  isLoading: boolean;
  error: Error | null;
  sortOrder: string;
  setSortOrder: (order: string) => void;
  addTask: (taskPayload: Record<string, any>) => Promise<Task>;
  updateTask: (id: number, taskPayload: Record<string, any>) => Promise<Task>;
  deleteTask: (id: number) => Promise<void>;
}
```

- Manages task CRUD operations
- Handles task sorting and filtering
- Integrates with Supabase for data persistence
- Provides loading and error states

#### Google Calendar Context
```typescript
interface GoogleCalendarContextType {
  isConnected: boolean;
  calendars: ConnectedCalendar[];
  isLoading: boolean;
  error: Error | null;
  fetchEvents: (calendarId: string, timeMin: Date, timeMax: Date) => Promise<any[]>;
}
```

- Manages Google Calendar integration
- Handles OAuth flow and token refresh
- Provides calendar event fetching
- Maintains connection state

#### Auth Context
```typescript
interface AuthContextType {
  session: Session | null;
  user: User | null;
  loading: boolean;
  signOut: () => Promise<void>;
  signInWithEmail: (credentials: SignInWithPasswordCredentials) => Promise<void>;
}
```

- Manages user authentication state
- Handles login/logout operations
- Provides user session information
- Integrates with Supabase Auth

### Data Flow

1. **Authentication Flow**:
   - User signs in through Supabase Auth
   - Session established and stored
   - Auth context updated
   - Protected routes accessible

2. **Task Management Flow**:
   - Tasks fetched via React Query
   - Cached based on query key (includes user ID)
   - Automatic background updates
   - Optimistic updates for mutations

3. **Calendar Integration Flow**:
   - Google Calendar connection status checked
   - Tokens refreshed automatically
   - Events fetched and cached
   - Real-time updates on window focus

### Error Handling

- Comprehensive error states for all operations
- Toast notifications for user feedback
- Automatic retry logic for failed requests
- Fallback UI components for error states

### State Persistence

- Supabase for database operations
- Local storage for temporary states
- Session storage for auth tokens
- React Query cache for performance

## Workflows

### Task Management Flow

1. User creates a task via the Add Task button/modal.
2. Task details (title, notes, color, start/end time) are saved via Supabase client to the PostgreSQL database.
3. Tasks are displayed in the Task Grid, automatically categorized based on their `start_time`.
4. User marks a task as complete, updating its `completed_at` timestamp.

### Google Calendar Connection Flow

1. User clicks "Connect Google Calendar" button.
2. User is redirected to Google for OAuth authentication.
3. Upon successful authentication, callback component receives authorization code.
4. Backend (likely an Edge Function or handled client-side with security considerations) exchanges code for tokens.
5. Access token, refresh token, calendar details are stored securely (associated with the user, possibly in a `connected_calendars` table).
6. Read-only events from the connected calendar are fetched and displayed in the UI.

## Future Enhancements

- **Calendar Integration**:
  - Write access to Google Calendar
  - Outlook Calendar integration
  - Apple Calendar integration
  - Calendar event notifications
  - Calendar sharing and collaboration
  - Multiple calendar color coding
  - Calendar event categories and filtering
- **Mobile Responsiveness**: Enhanced support for mobile devices.
- **Offline Mode**: Support for offline usage with data synchronization.
- **Notifications**: Push notifications for due tasks or calendar events.
- **Data Visualization**: Charts and reports for productivity metrics.
- **Refined Task Features**: Potentially re-introduce more structured GTD elements if desired, requiring schema changes.

## Development Guidelines

- Follow the existing component structure and naming conventions.
- Use Tailwind CSS for styling with shadcn/ui components.
- Implement form validation with Zod schemas (`shared/schema.ts`).
- Use TanStack React Query for data fetching and mutations against Supabase.
- Write descriptive commit messages.
- Add proper TSDoc comments for functions and components.
- Ensure environment variables (`VITE_SUPABASE_URL`, `VITE_SUPABASE_ANON_KEY`) are configured correctly.

## Deployment and Environment Setup

### Environment Configuration

The application requires the following environment variables:

```env
# Supabase Configuration
VITE_SUPABASE_URL=your-supabase-url
VITE_SUPABASE_ANON_KEY=your-supabase-anon-key

# Google OAuth Configuration
VITE_GOOGLE_CLIENT_ID=your-google-client-id
VITE_GOOGLE_CLIENT_SECRET=your-google-client-secret
VITE_GOOGLE_API_KEY=your-google-api-key
VITE_REDIRECT_URI=http://localhost:5173/auth/google/callback
# Database Configuration
DATABASE_URL=your-postgres-connection-string
```

### Development Setup

1. Install dependencies:
```bash
npm install
```

2. Set up environment variables in `.env`

3. Initialize the database:
```bash
npm run db:push
```

4. Start the development server:
```bash
npm run dev
```

### Available Scripts

- `npm run dev`: Start development server
- `npm run build`: Build for production
- `npm run check`: Run TypeScript checks
- `npm run db:push`: Push database schema changes

### Deployment Options

#### Vercel Deployment
1. Push your code to GitHub
2. Create a new project in Vercel
3. Connect to your GitHub repository
4. Configure environment variables
5. Deploy

#### Supabase Setup
1. Create a new Supabase project
2. Run the SQL scripts in the `sql/` directory
3. Configure Authentication providers
4. Set up Edge Functions
5. Configure appropriate redirect URLs
6. Update environment variables with production URLs

### Development Server Configuration

The development server is configured with:
- Vite for fast HMR
- TypeScript support
- Path aliases
- Port configuration (5173)
- CORS and security headers
- Proper error handling

### Production Build

The production build process:
1. TypeScript compilation and type checking
2. Asset optimization and bundling
3. Environment variable injection
4. Static file handling
5. Security headers configuration

### Database Migration

Database changes are managed through Drizzle:

```bash
# Push schema changes
npm run db:push

# Generate migration files
drizzle-kit generate:pg

# Apply migrations
drizzle-kit push:pg
```

### Security Configuration

1. Configure Supabase Authentication:
   - Set up email provider
   - Configure OAuth providers
   - Set redirect URLs
   - Customize email templates

2. Set up Row Level Security:
   - Enable RLS on all tables
   - Configure access policies
   - Set up user isolation

3. Configure API Security:
   - Set up CORS
   - Configure rate limiting
   - Set up error handling

### Monitoring and Logging

The application includes:
- Error tracking
- Performance monitoring
- Security logging
- User activity tracking
- API request logging

## Deployment

The application is configured for deployment on **Vercel** (see `vercel.json`). 
- Add proper TSDoc comments for functions and components

## Deployment

The application is configured to deploy on Vercel or Replit, with appropriate configuration files for each platform. 

### Calendar Features

The calendar component now includes rich interaction features and Google Calendar integration:

#### Calendar Interface
- **Weekly View**:
  - 7-day view with hourly time slots
  - Current time indicator
  - Split time slots (15-minute intervals)
  - Visual feedback for hover and drag states
  - Support for multiple items in the same slot
  - Intelligent layout for overlapping events

#### Drag and Drop
- **Desktop**: 
  - Drag tasks to reschedule them
  - Visual feedback with drag ghost
  - 15-minute time slot precision
  - Automatic task duration preservation
  - Visual indicators for drop targets

#### Touch Support
- **Mobile and Tablet**:
  - Long press to initiate drag
  - Touch drag with visual feedback
  - Ghost element follows touch
  - 15-minute slot precision
  - Haptic feedback (where supported)
  - Drag cancellation on scroll

#### Time Slots
- 30-minute default duration for new tasks
- Split time slots (15-minute intervals)
- Visual feedback for hover and drag states
- Support for multiple items in the same slot
- Intelligent layout for overlapping events

#### Event Management
- **Task Events**:
  - Click to edit
  - Drag to reschedule
  - Color customization
  - Completion status indicators
  - Duration preservation
  - Automatic conflict avoidance

- **Google Calendar Events**:
  - Read-only display
  - Click for detailed view
  - Custom color support
  - Auto-refresh on changes
  - Token management
  - Multiple calendar support

### Connected Calendar Schema

```typescript
export type ConnectedCalendar = {
  id: number;
  user_id: number;
  provider: 'google' | 'outlook' | string;
  calendar_id: string;
  calendar_name: string;
  access_token: string;
  refresh_token: string | null;
  token_expires_at: string | null;
  is_primary: boolean;
  is_enabled: boolean;
  created_at: string;
  last_synced_at: string | null;
};
```

### Calendar Event Schema

```typescript
export type CalendarEvent = {
  id: number;
  title: string;
  description: string | null;
  start_time: string;
  end_time: string;
  taskId: number | null;
  color: string | null;
  createdAt: string;
  updatedAt: string;
};
```

### Calendar API Endpoints

#### Calendar Events
- `GET /api/calendar-events`: Get all calendar events
- `GET /api/calendar-events/:id`: Get a specific event
- `GET /api/tasks/:taskId/calendar-events`: Get events for a task
- `POST /api/calendar-events`: Create a new event
- `PATCH /api/calendar-events/:id`: Update an event
- `DELETE /api/calendar-events/:id`: Delete an event

#### Connected Calendars
- `GET /api/users/:userId/connected-calendars`: Get user's connected calendars
- `GET /api/connected-calendars/:id`: Get a specific connected calendar
- `POST /api/connected-calendars`: Connect a new calendar
- `PATCH /api/connected-calendars/:id`: Update calendar settings
- `DELETE /api/connected-calendars/:id`: Disconnect a calendar

## Security and Authentication

### Authentication System

The application uses Supabase Auth for user authentication and management:

#### User Authentication Flow
1. User signs up/logs in through Supabase Auth
2. Session established and stored securely
3. Auth context updated with user information
4. Protected routes become accessible

#### Authentication Features
- Email/Password authentication
- Password reset functionality
- Email verification
- Session persistence
- Protected routes
- Automatic token refresh

### Database Security

#### Row Level Security (RLS)

All database tables implement Row Level Security to ensure data isolation:

```sql
-- Tasks table RLS policies
CREATE POLICY "Users can view their own tasks" 
  ON public.tasks 
  FOR SELECT 
  USING (auth.uid() = user_id);

CREATE POLICY "Users can insert their own tasks" 
  ON public.tasks 
  FOR INSERT 
  WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update their own tasks" 
  ON public.tasks 
  FOR UPDATE 
  USING (auth.uid() = user_id);

CREATE POLICY "Users can delete their own tasks" 
  ON public.tasks 
  FOR DELETE 
  USING (auth.uid() = user_id);
```

#### User Data Model
```sql
CREATE TABLE public.users (
  id UUID PRIMARY KEY,
  username TEXT UNIQUE,
  email TEXT UNIQUE,
  calendar_sync_enabled BOOLEAN DEFAULT false,
  default_calendar_id INT4 DEFAULT NULL,
  default_task_color TEXT DEFAULT NULL,
  default_gcal_color TEXT DEFAULT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc', NOW()),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc', NOW())
);
```

### OAuth Security

#### Google Calendar Integration
- Secure state parameter validation
- Token refresh handling
- Secure token storage
- Access token rotation
- Proper scope management

#### OAuth Flow
1. User initiates Google Calendar connection
2. State parameter generated and stored
3. User redirected to Google consent screen
4. Authorization code received and validated
5. Tokens securely stored in database
6. Access tokens automatically refreshed

### API Security

#### Endpoint Protection
- All endpoints require authentication
- CORS properly configured
- Rate limiting implemented
- Input validation using Zod
- Error handling with proper status codes

#### Data Access
- User data isolation through RLS
- Proper error handling
- Secure session management
- Token-based authentication
- Request validation

### Frontend Security

#### Route Protection
```typescript
const PrivateRoute = ({ children }: { children: React.ReactNode }) => {
  const { session, loading } = useAuth();

  if (loading) {
    return <div>Loading...</div>;
  }

  if (!session) {
    return <Redirect to="/login" />;
  }

  return <>{children}</>;
};
```

#### Security Features
- Protected routes
- Session management
- Token refresh handling
- Secure credential handling
- Error boundaries
- Loading states

### Environment Security

#### Environment Variables
```env
# Supabase Configuration
VITE_SUPABASE_URL=your-supabase-url
VITE_SUPABASE_ANON_KEY=your-supabase-anon-key

# Google OAuth Configuration
VITE_GOOGLE_CLIENT_ID=your-google-client-id
VITE_GOOGLE_CLIENT_SECRET=your-google-client-secret
VITE_GOOGLE_API_KEY=your-google-api-key
VITE_REDIRECT_URI=http://localhost:5173/auth/google/callback

# Database Configuration
DATABASE_URL=your-postgres-connection-string
```

#### Security Best Practices
- Environment variables properly configured
- Secrets never exposed to client
- Production URLs properly set
- SSL/TLS enforced
- Secure session storage

## Testing and Quality Assurance

### Type Safety

- **TypeScript**: Strict type checking enabled
- **Zod Validation**: Runtime type validation for forms and API data
- **Drizzle ORM**: Type-safe database operations
- **React Query**: Type-safe data fetching

### Error Handling

#### Frontend Error Handling
- **React Error Boundaries**: Catch and handle rendering errors
- **Form Validation**: Zod schemas for input validation
- **API Error Handling**: Comprehensive error states and user feedback
- **Toast Notifications**: User-friendly error messages

#### Backend Error Handling
- **Database Errors**: Proper error handling for database operations
- **API Errors**: Standardized error responses
- **Authentication Errors**: Secure error handling for auth flows
- **Token Refresh Errors**: Automatic handling of expired tokens

### Code Quality

#### Linting and Formatting
- **ESLint**: JavaScript/TypeScript linting
- **Prettier**: Code formatting
- **TypeScript Strict Mode**: Enhanced type checking
- **Import Sorting**: Organized imports

#### Best Practices
- **Component Structure**: Consistent component organization
- **State Management**: Clear data flow patterns
- **Error Boundaries**: Proper error containment
- **Performance Optimization**: React Query caching

### Testing Strategy

#### Unit Testing
- **Component Testing**: Individual component behavior
- **Hook Testing**: Custom hook functionality
- **Utility Function Testing**: Helper function validation
- **Form Validation Testing**: Input validation rules

#### Integration Testing
- **API Integration**: Backend communication
- **Authentication Flow**: User authentication process
- **Calendar Integration**: Google Calendar sync
- **Database Operations**: Data persistence

#### End-to-End Testing
- **User Flows**: Complete user journey testing
- **Critical Paths**: Essential functionality validation
- **Edge Cases**: Boundary condition testing
- **Error Scenarios**: Error handling verification

### Quality Gates

#### Pre-Commit Checks
- TypeScript compilation
- ESLint validation
- Prettier formatting
- Unit test execution

#### Deployment Checks
- Integration test suite
- Build verification
- Environment validation
- Security checks

### Monitoring and Debugging

#### Error Tracking
- **Error Logging**: Comprehensive error capture
- **Performance Monitoring**: Response time tracking
- **User Session Recording**: Bug reproduction
- **API Monitoring**: Endpoint health checks

#### Debugging Tools
- **React DevTools**: Component inspection
- **Network Inspector**: API request monitoring
- **Console Logging**: Structured debug output
- **Performance Profiling**: Resource usage analysis

### Documentation

#### Code Documentation
- **TSDoc Comments**: Function and component documentation
- **README Files**: Project setup and maintenance
- **API Documentation**: Endpoint specifications
- **Type Definitions**: Interface and type documentation

#### User Documentation
- **User Guides**: Feature documentation
- **API References**: Integration guidelines
- **Troubleshooting**: Common issues and solutions
- **Release Notes**: Version changes and updates

## Landing Page and User Onboarding

### Landing Page

The landing page showcases the application's key features and benefits:

#### Hero Section
- **Modern Design**: Clean, minimalist aesthetic
- **Value Proposition**: Clear messaging about productivity benefits
- **Call-to-Action**: Prominent sign-up buttons
- **App Preview**: Interactive application showcase

#### Feature Highlights
- **Simple Task Management**: Clean interface for task organization
- **Satisfying Completions**: Delightful micro-interactions
- **Calendar Integration**: Google Calendar sync showcase
- **Team Collaboration**: Task sharing capabilities

#### Testimonials
- **User Stories**: Real user experiences
- **Company Logos**: Notable company testimonials
- **Rating System**: 5-star rating display
- **Profile Pictures**: User avatars and titles

#### Call-to-Action Section
- **Free Trial**: No credit card required
- **Feature List**: Key benefits highlighted
- **Visual Demo**: Application screenshots
- **Sign-up Button**: Clear next steps

### User Authentication

#### Registration Flow
- **Simple Sign-up**: Email/password registration
- **Email Verification**: Account confirmation
- **Welcome Email**: Onboarding instructions
- **Profile Setup**: Optional user details

#### Login System
- **Email/Password**: Traditional login
- **Password Reset**: Secure recovery flow
- **Session Management**: Persistent login
- **Protected Routes**: Authenticated access

#### Password Management
- **Reset Flow**: Email-based recovery
- **Update Interface**: Password change form
- **Security Rules**: Password requirements
- **Validation**: Real-time feedback

### User Onboarding

#### Welcome Experience
- **Guided Tour**: Feature walkthrough
- **Sample Tasks**: Pre-populated examples
- **Quick Start Guide**: Basic usage tips
- **Setup Checklist**: Configuration steps

#### First-time Setup
- **Calendar Connection**: Google Calendar setup
- **Color Preferences**: Theme customization
- **Default Settings**: Initial configuration
- **Sample Project**: Example workflow

#### Help Resources
- **Tutorial Videos**: Feature demonstrations
- **Documentation**: User guides
- **FAQ Section**: Common questions
- **Support Access**: Help channels

### Authentication Schema

```typescript
// Registration Form Schema
export type RegisterFormData = {
  email: string;
  password: string;
  confirmPassword: string;
};

// Login Form Schema
export type LoginFormData = {
  email: string;
  password: string;
};

// Password Reset Schema
export type PasswordResetData = {
  email: string;
};

// Password Update Schema
export type PasswordUpdateData = {
  password: string;
  confirmPassword: string;
};
```

### Authentication API Endpoints

```typescript
// Authentication Routes
export const authRoutes = {
  register: '/auth/register',
  login: '/auth/login',
  logout: '/auth/logout',
  resetPassword: '/auth/reset-password',
  updatePassword: '/auth/update-password',
  verifyEmail: '/auth/verify-email',
};
```

## Performance Optimization

### React Query Configuration

The application uses TanStack React Query for efficient data management:

```typescript
export const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      refetchInterval: false,
      refetchOnWindowFocus: false,
      staleTime: Infinity,
      retry: false,
    },
    mutations: {
      retry: false,
    },
  },
});
```

### Caching Strategies

#### Server-Side Caching
- **Database Caching**: Efficient query caching with Supabase
- **Edge Function Caching**: Optimized token refresh operations
- **API Response Caching**: Cached responses for frequently accessed data
- **Static Asset Caching**: Optimized delivery of static resources

#### Client-Side Caching
- **React Query Cache**:
  - Infinite stale time for stable data
  - Disabled automatic refetching
  - Optimistic updates for mutations
  - Background data synchronization

#### Token Management
- **Access Token Caching**:
  - In-memory token storage
  - Automatic refresh before expiration
  - Background token updates
  - Secure token persistence

### Performance Features

#### Code Optimization
- **Code Splitting**: Dynamic imports for route-based chunking
- **Tree Shaking**: Elimination of unused code
- **Bundle Size Optimization**: Minimized production bundles
- **Module Preloading**: Intelligent resource loading

#### UI Performance
- **Virtualized Lists**: Efficient rendering of large lists
- **Lazy Loading**: Deferred loading of off-screen content
- **Image Optimization**: Responsive image loading
- **Animation Performance**: Hardware-accelerated animations

#### Network Optimization
- **Request Batching**: Grouped API requests
- **Response Compression**: Minimized data transfer
- **Connection Pooling**: Optimized database connections
- **CDN Integration**: Distributed content delivery

### Monitoring and Metrics

#### Performance Monitoring
- **API Response Times**: Request duration tracking
- **Component Render Times**: Performance measurement
- **Memory Usage**: Heap monitoring
- **Network Requests**: Request/response logging

#### Error Tracking
- **Error Boundaries**: Graceful failure handling
- **Performance Logging**: Timing and metrics collection
- **Debug Information**: Development tools integration
- **User Metrics**: Usage pattern analysis

### Development Tools

#### Build Optimization
```typescript
// vite.config.ts
export default defineConfig({
  build: {
    outDir: path.resolve(__dirname, "dist"),
    emptyOutDir: true,
    // Production optimizations
    minify: "terser",
    sourcemap: false,
    // Split chunks
    rollupOptions: {
      output: {
        manualChunks: {
          vendor: ["react", "react-dom"],
          // Other chunk configurations
        }
      }
    }
  }
});
```

#### Development Server
```typescript
// server/vite.ts
export async function setupVite(app: Express, server: Server) {
  const serverOptions = {
    middlewareMode: true,
    hmr: { server },
    allowedHosts: true,
  };

  const vite = await createViteServer({
    ...viteConfig,
    configFile: false,
    customLogger: {
      ...viteLogger,
      error: (msg, options) => {
        viteLogger.error(msg, options);
        process.exit(1);
      },
    },
    server: serverOptions,
    appType: "custom",
  });
}
```

#### Auto-Schedule Feature
- **Smart Scheduling Button**: Icon button in Today/Tomorrow sections for unscheduled tasks
- **Intelligent Time Slots**:
  - Schedules in 30-minute blocks
  - Respects business hours (9 AM - 5 PM)
  - Skips weekends
  - Blocks out lunch break (12:30 PM - 1:30 PM)
  - Aligns to 15-minute intervals
  - Looks ahead up to 14 days
- **Conflict Avoidance**:
  - Checks Google Calendar events
  - Considers existing scheduled tasks
  - Skips occupied time slots
  - Preserves task duration
- **User Interface**:
  - Clean popup dialog
  - Lists tasks to be scheduled
  - Shows scheduling status
  - Provides feedback on completion
  - Mobile-responsive design

#### Completed Tasks Popup
- **Access**: Available through the Completed section header
- **Task Display**:
  - Shows all completed tasks
  - Displays completion timestamp
  - Maintains task colors and metadata
  - Preserves original scheduling
- **Interface Features**:
  - Modal dialog presentation
  - Scrollable task list
  - Task count indicator
  - Clean, minimal design
  - Mobile-optimized layout
- **Task Management**:
  - View completed task details
  - Restore completed tasks
  - Bulk management options
  - Completion history

 