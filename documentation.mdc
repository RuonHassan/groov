# Groov - Technical Documentation

## Overview

Groov is a comprehensive productivity application built on the Getting Things Done (GTD) methodology. It helps users organize, prioritize, and track tasks efficiently with a minimalist and intuitive interface. The application includes task management and calendar integration with secure authentication and data protection.

## Technology Stack

- **Frontend**: React with TypeScript
- **Backend**: Express.js API with Supabase services
- **State Management**: React Query for server state, React Context for local state
- **UI Components**: Shadcn UI with Tailwind CSS
- **Routing**: Wouter
- **Form Handling**: React Hook Form with Zod validation
- **Authentication**: Supabase Auth with JWT
- **Database**: PostgreSQL (via Supabase or Vercel Postgres)
- **Serverless Functions**: Supabase Edge Functions
- **OAuth Integration**: Google OAuth 2.0

## Application Structure

### Client-Side Architecture

The client application is organized into the following directories:

- `/client/src/components`: Reusable UI components
- `/client/src/components/ui`: Shadcn UI components
- `/client/src/contexts`: React contexts for state management
- `/client/src/hooks`: Custom React hooks
- `/client/src/lib`: Utility functions and configurations
- `/client/src/pages`: Main page components

### Server-Side Architecture

The server provides a REST API for data operations:

- `/server/index.ts`: Express server setup
- `/server/routes.ts`: API endpoint definitions
- `/server/storage.ts`: Database interaction logic
- `/server/vite.ts`: Vite configuration for development

### Supabase Integration

The application uses Supabase for multiple services:

- **Authentication**: Email/password login with JWT
- **Database**: PostgreSQL with Row-Level Security
- **Edge Functions**: Serverless functions for OAuth and other operations

### Shared Code and SQL

- `/shared/schema.ts`: Contains shared data models and validation schemas
- `/sql/user_table.sql`: User profile table definition with RLS policies
- `/sql/task_rls.sql`: Task table RLS policies and constraints
- `/supabase/functions/`: Edge Function implementations

## Core Features

### 1. Authentication System

The application uses Supabase Authentication with the following features:

- **Registration & Login**: Email/password authentication
- **JWT-based Sessions**: Secure token-based authentication
- **Password Reset**: Secure flow for resetting passwords
- **Protected Routes**: Client-side route protection
- **User Profiles**: Extended profiles linked to auth.users

Implementation details:
- `AuthContext` provides authentication state throughout the app
- `AuthProvider` manages authentication state and Supabase auth operations
- `PrivateRoute` component restricts access to authenticated routes
- Automatic session persistence and token refresh

### 2. Task Management

Tasks in the application follow the GTD methodology with the following statuses:

- **Inbox**: New, uncategorized tasks
- **Next**: Tasks ready to be worked on
- **Waiting**: Tasks pending someone else's action
- **Someday**: Tasks to be considered in the future
- **Projects**: Multi-step tasks
- **Completed**: Finished tasks

Tasks contain the following properties:
- `id`: Unique identifier
- `title`: Task name
- `notes`: Additional information
- `status`: Current state (inbox/next/waiting/etc.)
- `context`: Environment or tool needed (e.g., home, computer)
- `energy`: Energy level required (high/medium/low)
- `priority`: Importance level (high/medium/low)
- `time`: Estimated time in minutes
- `dueDate`: Optional deadline
- `completedAt`: Completion timestamp
- `createdAt`: Creation timestamp
- `user_id`: User ID from Supabase Auth (for Row-Level Security)

Task data is protected by Row-Level Security policies ensuring users can only access their own tasks.

### 3. Calendar Integration

The calendar feature allows users to:
- Schedule tasks at specific time slots
- View tasks in a weekly calendar view
- Create, update, and delete calendar events
- Link calendar events to specific tasks

Calendar events contain:
- `id`: Unique identifier
- `title`: Event name
- `description`: Event details
- `startTime`: Start date and time
- `endTime`: End date and time
- `taskId`: Optional associated task
- `createdAt`: Creation timestamp
- `user_id`: User ID from Supabase Auth (for Row-Level Security)

### 4. Google Calendar Integration

The application integrates with Google Calendar using OAuth 2.0:

#### OAuth Flow
1. User initiates connection via UI
2. Application redirects to Google consent screen
3. Google redirects back with authorization code
4. Supabase Edge Function (`google-calendar-callback`) exchanges code for tokens
5. Access and refresh tokens stored in database
6. Tokens used to fetch calendar data via Google Calendar API

#### Token Management
- Access tokens expire after 1 hour
- Refresh tokens automatically renewed via Edge Function (`google-calendar-refresh`)
- Tokens stored securely in database with Row-Level Security

#### Implementation Details
- `GoogleCalendarContext` manages calendar connection state
- `GoogleCalendarButton` initiates OAuth flow
- `GoogleCalendarCallback` handles OAuth redirect
- Client-side Google API integration fetches events

## Database Schema and Security

### Row-Level Security (RLS)

All tables implement Row-Level Security to ensure data isolation:

```sql
ALTER TABLE public.tasks ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Users can view their own tasks" 
  ON public.tasks 
  FOR SELECT 
  USING (auth.uid() = user_id);

CREATE POLICY "Users can insert their own tasks" 
  ON public.tasks 
  FOR INSERT 
  WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update their own tasks" 
  ON public.tasks 
  FOR UPDATE 
  USING (auth.uid() = user_id);

CREATE POLICY "Users can delete their own tasks" 
  ON public.tasks 
  FOR DELETE 
  USING (auth.uid() = user_id);
```

### Key Data Models

#### User Profile

```typescript
type User = {
  id: string;           // UUID from auth.users
  username: string;     // Username for display
  email: string;        // Email address
  createdAt: string;    // Creation timestamp
  updatedAt: string;    // Last update timestamp
};
```

#### Task

```typescript
type Task = {
  id: number;
  title: string;
  notes: string | null;
  status: "inbox" | "next" | "waiting" | "someday" | "project" | "completed";
  context: string | null;
  energy: "high" | "medium" | "low" | null;
  priority: "high" | "medium" | "low" | null;
  time: number | null;
  dueDate: string | null;
  completedAt: string | null;
  createdAt: string;
  updatedAt: string;
  user_id: string;      // UUID from auth.users
};
```

#### Calendar Event

```typescript
type CalendarEvent = {
  id: number;
  title: string;
  description: string | null;
  startTime: string;
  endTime: string;
  taskId: number | null;
  createdAt: string;
  updatedAt: string;
  user_id: string;      // UUID from auth.users
};
```

#### Connected Calendar

```typescript
type ConnectedCalendar = {
  id: number;
  user_id: string;      // UUID from auth.users
  provider: 'google' | 'outlook' | string;
  calendar_id: string;
  calendar_name: string;
  access_token: string;
  refresh_token: string | null;
  token_expires_at: string | null;
  is_primary: boolean;
  is_enabled: boolean;
  created_at: string;
  last_synced_at: string | null;
};
```

## API Endpoints

### Authentication
- Handled by Supabase Auth API

### Task Management
- `GET /api/tasks`: Get all tasks (filtered to current user via RLS)
- `GET /api/tasks/:id`: Get a specific task
- `POST /api/tasks`: Create a new task
- `PATCH /api/tasks/:id`: Update a task
- `DELETE /api/tasks/:id`: Delete a task

### Calendar Events
- `GET /api/calendar-events`: Get all calendar events
- `GET /api/calendar-events/:id`: Get a specific event
- `POST /api/calendar-events`: Create a new event
- `PATCH /api/calendar-events/:id`: Update an event
- `DELETE /api/calendar-events/:id`: Delete an event

### Connected Calendars
- `GET /api/users/:userId/connected-calendars`: Get user's connected calendars
- `POST /api/connected-calendars`: Connect a new calendar
- `PATCH /api/connected-calendars/:id`: Update a connected calendar
- `DELETE /api/connected-calendars/:id`: Disconnect a calendar

## Supabase Edge Functions

### Google Calendar OAuth Integration
- **Function**: `google-calendar-callback`
- **Purpose**: Handles OAuth code exchange and token storage
- **Inputs**: Authorization code and state from Google OAuth redirect
- **Process**: Exchanges code for tokens, fetches primary calendar info, stores in database

### Token Refresh
- **Function**: `google-calendar-refresh`
- **Purpose**: Refreshes expired Google API tokens
- **Inputs**: Calendar ID and refresh token
- **Process**: Requests new access token from Google, updates database

## Context System

The application uses React Context for state management:

### Authentication Context
- **File**: `client/src/contexts/AuthContext.tsx`
- **Purpose**: Manages authentication state
- **Key Functions**:
  - `signInWithEmail`: Authenticates user with email/password
  - `signUpWithEmail`: Registers new user
  - `signOut`: Logs out current user
- **State**: Current user, session, loading state

### Google Calendar Context
- **File**: `client/src/contexts/GoogleCalendarContext.tsx`
- **Purpose**: Manages Google Calendar connection
- **Key Functions**:
  - `fetchEvents`: Retrieves events from Google Calendar API
- **State**: Connection status, calendars, loading state, errors

### Week Context
- **File**: `client/src/contexts/WeekContext.tsx`
- **Purpose**: Manages calendar view state
- **Key Functions**:
  - `goToPreviousWeek`: Navigate to previous week
  - `goToNextWeek`: Navigate to next week
- **State**: Current date for calendar view

## Security Considerations

### Authentication Security
- JWT-based authentication with Supabase Auth
- Automatic token refresh
- Secure password reset flow
- Email verification support

### Data Security
- Row-Level Security policies on all tables
- User data isolation at the database level
- Server-side validation for all inputs
- Client-side form validation with Zod

### API Security
- JWT validation for all API requests
- CORS protection
- Rate limiting on authentication endpoints

### OAuth Security
- Secure state parameter validation
- Tokens stored securely in database (not client-side)
- Automatic token refresh without exposing refresh tokens to client

## Deployment

### Vercel Deployment
- Static frontend deployed on Vercel
- API routes served as serverless functions

### Supabase Configuration
- Authentication settings for production
- Database migrations and RLS policies
- Edge Functions configuration

## Development Guidelines

- Follow the existing component structure and naming conventions
- Use Tailwind CSS for styling with shadcn/ui components
- Implement form validation with Zod schemas
- Use React Query for data fetching and mutations
- Ensure all database tables have appropriate RLS policies
- Test authentication flows thoroughly
- Secure all API endpoints with proper authorization

## Future Enhancements

- **User Authentication**: Multi-user support with secure login
- **PostgreSQL Integration**: Moving from in-memory to persistent database storage
- **Mobile Responsiveness**: Enhanced support for mobile devices
- **Offline Mode**: Support for offline usage with data synchronization
- **Notifications**: Push notifications for due tasks
- **Data Visualization**: Charts and reports for productivity metrics
- **Integrations**: Calendar sync with additional providers

## Development Guidelines

- Follow the existing component structure and naming conventions
- Use Tailwind CSS for styling with shadcn/ui components
- Implement form validation with Zod schemas
- Use React Query for data fetching and mutations
- Write descriptive commit messages
- Add proper TSDoc comments for functions and components

## Deployment

The application is configured to deploy on Vercel or Replit, with appropriate configuration files for each platform. 
- Add proper TSDoc comments for functions and components

## Deployment

The application is configured to deploy on Vercel or Replit, with appropriate configuration files for each platform. 