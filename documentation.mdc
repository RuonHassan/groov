---
description: 
globs: 
alwaysApply: false
---
# Groov- Product Documentation

## Overview

Groov is a simple productivity application designed to help users organize and track tasks efficiently with a minimalist and intuitive interface. The application includes task management and read-only Google Calendar integration.

## Technology Stack

- **Frontend**: React with TypeScript
- **Backend**: Supabase (PostgreSQL)
- **Database ORM**: Drizzle ORM
- **Authentication**: Supabase Auth
- **State Management/Data Fetching**: TanStack React Query
- **UI Components**: Shadcn UI (built on Radix UI & Tailwind CSS)
- **Styling**: Tailwind CSS
- **Routing**: Wouter
- **Form Handling**: React Hook Form with Zod validation
- **Date Handling**: `date-fns`, `react-day-picker`

## Application Structure

### Client-Side Architecture

The client application is organized into the following directories:

- `/client/src/components`: Reusable UI components
- `/client/src/components/ui`: Shadcn UI components
- `/client/src/contexts`: React contexts for state management and data fetching
- `/client/src/hooks`: Custom React hooks
- `/client/src/lib`: Utility functions, configurations (including Supabase client)
- `/client/src/pages`: Main page components

### Server-Side/Backend

- **Database**: PostgreSQL managed via Supabase
- **Schema**: Defined using Drizzle ORM in `/shared/schema.ts`
- **Authentication**: Handled by Supabase Auth
- **Row Level Security (RLS)**: Implemented in PostgreSQL for data access control (see `/sql/`)
- **Data Interaction**: Primarily through the Supabase client library (`@supabase/supabase-js`) on the frontend, coordinated with React Query.

### Shared Code

- `/shared/schema.ts`: Contains Drizzle ORM schema definitions, Zod validation schemas derived using `drizzle-zod`, and shared TypeScript types.

## Core Features

### 1. Task Management

- **Task Creation & Editing**: Add tasks with titles, notes, start/end times, and color-coding.
- **Task Views**: Organize and view tasks, including sections for Today, Tomorrow, Future, and Someday based on start times.
- **Completion Tracking**: Mark tasks as completed.

Tasks contain the following properties (derived from `shared/schema.ts`):
- `id`: Unique identifier (number)
- `title`: Task name (string)
- `notes`: Additional information (string, nullable)
- `color`: Hex color code for the task (string, nullable)
- `startTime`: Start date and time (timestamp string, nullable) - `start_time` in DB
- `endTime`: End date and time (timestamp string, nullable) - `end_time` in DB
- `completedAt`: Completion timestamp (timestamp string, nullable) - `completed_at` in DB
- `createdAt`: Creation timestamp (timestamp string) - `created_at` in DB
- `updatedAt`: Last updated timestamp (timestamp string) - `updated_at` in DB
- `user_id`: Associated user ID (UUID, handled by RLS)

### 2. Google Calendar Integration (Read-Only)

- **Connect Google Account**: Authenticate via OAuth to link a Google Calendar.
- **View Events**: Display events from the primary connected Google Calendar alongside tasks in the weekly view.
- **Future Plans**: Expand integration to include Outlook and iCal, potentially adding write capabilities.

### 3. User Authentication

- **Secure Login/Registration**: Uses Supabase Auth for user management.
- **Data Isolation**: Each user's data (e.g., tasks) is secured using PostgreSQL Row Level Security based on their authenticated user ID.

## API Endpoints / Data Fetching

Data interaction (CRUD operations for tasks, fetching calendar connection info) is primarily handled via:
- **Supabase Client Library (`@supabase/supabase-js`)**: Used directly in the frontend.
- **TanStack React Query**: Manages server state, caching, and data fetching hooks.
- **PostgreSQL Row Level Security (RLS)**: Enforces data access rules directly in the database.
- **Supabase Edge Functions (Potential)**: The `/supabase/functions/` directory suggests potential use, though not confirmed active in this analysis.

## Data Models

### Task (from `shared/schema.ts`)

```typescript
// Represents the data structure fetched from the database (snake_case)
export type Task = {
  id: number;
  title: string;
  notes: string | null;
  color: string | null;
  start_time: string | null; // ISO 8601 timestamp
  end_time: string | null;   // ISO 8601 timestamp
  completed_at: string | null; // ISO 8601 timestamp
  created_at: string;        // ISO 8601 timestamp
  updated_at: string;        // ISO 8601 timestamp
  // user_id is present in DB for RLS but usually not directly handled in frontend model
};

// Represents the data structure used for inserting/updating (camelCase, matches form)
export type InsertTask = {
  title: string;
  notes?: string | null;
  color?: string | null;
  startTime?: string | null; // ISO 8601 timestamp
  endTime?: string | null;   // ISO 8601 timestamp
  // completedAt, createdAt, updatedAt, id are handled by DB/backend
};
```

### Connected Calendar (from `shared/schema.ts`)

```typescript
export type ConnectedCalendar = {
  id: number;
  user_id: number; // Or UUID depending on user table schema
  provider: 'google' | 'outlook' | string; // Allows known + future providers
  calendar_id: string;
  calendar_name: string;
  access_token: string;
  refresh_token: string | null;
  token_expires_at: string | null; // ISO 8601 timestamp
  is_primary: boolean;
  is_enabled: boolean;
  created_at: string; // ISO 8601 timestamp
  last_synced_at: string | null; // ISO 8601 timestamp
};
```

### User (Conceptual - Managed by Supabase Auth)

```typescript
// User data is primarily managed by Supabase Auth.
// The 'auth.users' table typically includes fields like:
export type AuthUser = {
  id: string; // UUID
  email?: string;
  phone?: string;
  // ... other Supabase Auth fields
  created_at: string; // ISO 8601 timestamp
  // ... may include app-specific metadata
};
```

## UI Components

### Main Navigation

- **Header**: Contains app title, user controls (login/logout/profile), and potentially quick actions.
- **Sidebar (if applicable)**: Provides access to different views (e.g., Dashboard, Calendar).

### Task Views

- **Dashboard**: Overview of tasks, potentially upcoming calendar events.
- **Task Grid**: Main task management interface showing tasks categorized by time (Today, Tomorrow, Future, Someday).
- **Task Card**: Individual task display.
- **Add/Edit Task Modal**: Form for creating and editing tasks (title, notes, times, color).

### Calendar Components

- **Weekly Calendar View**: Displays tasks and integrated Google Calendar events in a weekly layout.
- **Google Calendar Connection**: UI elements for initiating OAuth flow (`GoogleCalendarButton.tsx`) and handling callbacks (`GoogleCalendarCallback.tsx`).

## State Management

The application uses TanStack React Query for managing server state (tasks, calendar connections) and React Context for global UI state (e.g., current week in calendar view, potentially theme).

### Task Context (`TaskContext.tsx`)

Provides task-related state and mutation functions using React Query:
- Fetched tasks list (`useQuery`)
- Functions to add, update, delete tasks (`useMutation`)

### Google Calendar Context (`GoogleCalendarContext.tsx`)

Manages state related to Google Calendar integration:
- Connected calendar information
- Fetched Google Calendar events
- Authentication status

### Week Context (`WeekContext.tsx`)

Manages the state of the currently viewed week in the calendar component.

## Workflows

### Task Management Flow

1. User creates a task via the Add Task button/modal.
2. Task details (title, notes, color, start/end time) are saved via Supabase client to the PostgreSQL database.
3. Tasks are displayed in the Task Grid, automatically categorized based on their `start_time`.
4. User marks a task as complete, updating its `completed_at` timestamp.

### Google Calendar Connection Flow

1. User clicks "Connect Google Calendar" button.
2. User is redirected to Google for OAuth authentication.
3. Upon successful authentication, callback component receives authorization code.
4. Backend (likely an Edge Function or handled client-side with security considerations) exchanges code for tokens.
5. Access token, refresh token, calendar details are stored securely (associated with the user, possibly in a `connected_calendars` table).
6. Read-only events from the connected calendar are fetched and displayed in the UI.

## Future Enhancements

- **Expanded Calendar Integration**: Add support for Outlook and iCal sync, potentially add write capabilities (creating/editing events).
- **Mobile Responsiveness**: Enhanced support for mobile devices.
- **Offline Mode**: Support for offline usage with data synchronization.
- **Notifications**: Push notifications for due tasks or calendar events.
- **Data Visualization**: Charts and reports for productivity metrics.
- **Refined Task Features**: Potentially re-introduce more structured GTD elements if desired, requiring schema changes.

## Development Guidelines

- Follow the existing component structure and naming conventions.
- Use Tailwind CSS for styling with shadcn/ui components.
- Implement form validation with Zod schemas (`shared/schema.ts`).
- Use TanStack React Query for data fetching and mutations against Supabase.
- Write descriptive commit messages.
- Add proper TSDoc comments for functions and components.
- Ensure environment variables (`VITE_SUPABASE_URL`, `VITE_SUPABASE_ANON_KEY`) are configured correctly.

## Deployment

The application is configured for deployment on **Vercel** (see `vercel.json`). 
- Add proper TSDoc comments for functions and components

## Deployment

The application is configured to deploy on Vercel or Replit, with appropriate configuration files for each platform. 